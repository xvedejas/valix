--- b/build/grub-mkrescue
+++ a/build/grub-mkrescue
@@ -1,7 +1,7 @@
 #! /bin/sh -e
 
 # Make GRUB rescue image
-# Copyright (C) 1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009  Free Software Foundation, Inc.
+# Copyright (C) 1999,2000,2001,2002,2003,2004,2005,2006,2007,2008  Free Software Foundation, Inc.
 #
 # GRUB is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -19,38 +19,47 @@
 # Initialize some variables.
 transform="s,x,x,"
 
-prefix=/home/evgeny/devel/grub-inst
+prefix=/usr
 exec_prefix=${prefix}
 bindir=${exec_prefix}/bin
 libdir=${exec_prefix}/lib
 PACKAGE_NAME=GRUB
 PACKAGE_TARNAME=grub
-PACKAGE_VERSION=1.98
+PACKAGE_VERSION=1.97~beta4
 target_cpu=i386
-native_platform=pc
-pkglib_DATA="efiemu32.o efiemu64.o moddep.lst command.lst fs.lst partmap.lst parttool.lst handler.lst video.lst crypto.lst terminal.lst"
+platform=pc
+pkglibdir=${libdir}/`echo ${PACKAGE_TARNAME}/${target_cpu}-${platform} | sed ${transform}`
 
-coreboot_dir=${libdir}/$(echo ${PACKAGE_TARNAME} | sed ${transform})/${target_cpu}-coreboot
-pc_dir=${libdir}/$(echo ${PACKAGE_TARNAME} | sed ${transform})/${target_cpu}-pc
+grub_mkimage=${bindir}/`echo grub-mkimage | sed ${transform}`
 
 # Usage: usage
 # Print the usage.
 usage () {
     cat <<EOF
-Usage: $0 [OPTION] SOURCE...
+Usage: grub-mkrescue [OPTION] output_image
 Make GRUB rescue image.
 
   -h, --help              print this message and exit
   -v, --version           print the version information and exit
   --modules=MODULES       pre-load specified modules MODULES
-  --output=FILE           save output in FILE [required]
+  --overlay=DIR           overlay directory DIR in the memdisk image
+                          (may be specified multiple times)
+  --pkglibdir=DIR         use images from directory DIR instead of ${pkglibdir}
+  --grub-mkimage=FILE     use FILE as grub-mkimage
+  --image-type=TYPE       select floppy or cdrom (default)
+  --emulation=TYPE        select El Torito boot emulation type floppy
+                          or none (default) (cdrom only)
 
-$0 generates a bootable rescue image with specified source files or directories.
+grub-mkimage generates a bootable rescue image of the specified type.
 
 Report bugs to <bug-grub@gnu.org>.
 EOF
 }
 
+image_type=cdrom
+input_dir=${pkglibdir}
+emulation=none
+
 # Check the arguments.
 for option in "$@"; do
     case "$option" in
@@ -58,143 +67,129 @@
 	usage
 	exit 0 ;;
     -v | --version)
-	echo "$0 (GNU GRUB ${PACKAGE_VERSION})"
+	echo "grub-mkrescue (GNU GRUB ${PACKAGE_VERSION})"
 	exit 0 ;;
     --modules=*)
 	modules=`echo "$option" | sed 's/--modules=//'` ;;
-    --output=*)
-	output_image=`echo "$option" | sed 's/--output=//'` ;;
-    # Intentionally undocumented
-    --override-directory=*)
-	override_dir=`echo "${option}/" | sed 's/--override-directory=//'`
-	PATH=${override_dir}:$PATH
-	export PATH
-	;;
+    --overlay=*)
+	overlay=${overlay}${overlay:+ }`echo "$option" | sed 's/--overlay=//'` ;;
+    --pkglibdir=*)
+	input_dir=`echo "$option" | sed 's/--pkglibdir=//'` ;;
+    --grub-mkimage=*)
+	grub_mkimage=`echo "$option" | sed 's/--grub-mkimage=//'` ;;
+    --image-type=*)
+    	image_type=`echo "$option" | sed 's/--image-type=//'`
+        case "$image_type" in
+          floppy|cdrom) ;;
+          *)
+            echo "Unknown image type \`$image_type'" 1>&2
+            exit 1 ;;
+        esac ;;
+    --emulation=*)
+    	emulation=`echo "$option" | sed 's/--emulation=//'`
+        case "$emulation" in
+          floppy|none) ;;
+          *)
+            echo "Unknown emulation type \`$emulation'" 1>&2
+            exit 1 ;;
+        esac ;;
     -*)
 	echo "Unrecognized option \`$option'" 1>&2
 	usage
 	exit 1
 	;;
     *)
-	source="${source} ${option}" ;;
+	if test "x$output_image" != x; then
+	    echo "Unrecognized option \`$option'" 1>&2
+	    usage
+	    exit 1
+	fi
+	output_image="${option}" ;;
     esac
 done
 
-if [ "x${output_image}" = x ] ; then
-  echo "output file must be given" >&2
+if test "x$output_image" = x; then
   usage
   exit 1
 fi
 
-if test "x$TMP" != x; then
-  MKTEMP_TEMPLATE="$TMP/grub-mkrescue.XXXXXXXXXX"
-elif test "x$TEMP" != x; then
-  MKTEMP_TEMPLATE="$TEMP/grub-mkrescue.XXXXXXXXXX"
-else
-  MKTEMP_TEMPLATE="/tmp/grub-mkrescue.XXXXXXXXXX"
-fi
+aux_dir=`mktemp -d`
+mkdir -p ${aux_dir}/boot/grub
+
+for file in ${input_dir}/*.mod ${input_dir}/efiemu??.o \
+  ${input_dir}/command.lst ${input_dir}/moddep.lst ${input_dir}/fs.lst \
+  ${input_dir}/handler.lst ${input_dir}/parttool.lst; do
+  if test -f "$file"; then
+    cp -f "$file" ${aux_dir}/boot/grub/
+  fi
+done
 
-iso9660_dir=`mktemp -d "$MKTEMP_TEMPLATE"`
-mkdir -p ${iso9660_dir}/boot/grub
-
-process_input_dir ()
-{
-    input_dir="$1"
-    platform="$2"
-    mkdir -p ${iso9660_dir}/boot/grub/${target_cpu}-${platform}
-    for file in ${input_dir}/*.mod; do
-        if test -f "$file"; then
-            cp -f "$file" ${iso9660_dir}/boot/grub/${target_cpu}-${platform}/
-        fi
-    done
-    for file in ${pkglib_DATA}; do
-	if test -f "${input_dir}/${file}"; then
-            cp -f "${input_dir}/${file}" ${iso9660_dir}/boot/grub/${target_cpu}-${platform}/
-	fi
-    done
+modules="biosdisk `cat ${input_dir}/partmap.lst` ${modules}"
+for i in ${modules} ; do
+  echo "insmod $i"
+done > ${aux_dir}/boot/grub/grub.cfg
 
-    mkdir -p ${iso9660_dir}/boot/grub/locale
-    for file in ${input_dir}/po/*.mo; do
-        if test -f "$file"; then
-	    cp -f "$file" ${iso9660_dir}/boot/grub/locale/
-	fi
-    done
-}
+for d in ${overlay}; do
+  echo "Overlaying $d"
+  cp -dpR "${d}"/* "${aux_dir}"/
+done
 
-if [ "${override_dir}" = "" ] ; then
-    if test -e "${coreboot_dir}" ; then
-        process_input_dir ${coreboot_dir} coreboot
-    fi
-    if test -e "${pc_dir}" ; then
-        process_input_dir ${pc_dir} pc
-    fi
+if [ "x${image_type}" = xfloppy -o "x${emulation}" = xfloppy ] ; then
+  ### *** Our Change *** ###
+  sed 's/(hd96)/(memdisk)/g' build/grub.cfg > ${aux_dir}/boot/grub/grub.cfg
+  additional_files="valix_boot.tga 8x13.pf2"
+  for file in ${additional_files}; do
+	cp build/${file} ${aux_dir}/boot/grub/
+  done;
+  cp output/kernel.elf ${aux_dir}/boot/
+  
+  # build memdisk
+  memdisk_img=`mktemp`
+  tar -C ${aux_dir} -cf ${memdisk_img} boot
+  rm -rf ${aux_dir}
+
+  # build core.img
+  core_img=`mktemp`
+  ${grub_mkimage} -d ${input_dir}/ -m ${memdisk_img} -o ${core_img} memdisk tar biosdisk iso9660
+  rm -f ${memdisk_img}
+
+  # build floppy image
+  if [ "x${image_type}" = xcdrom ] ; then
+    floppy_dir=`mktemp -d`
+    floppy_img=${floppy_dir}/grub_floppy.img
+  else
+    floppy_img=${output_image}
+  fi
+  cat ${input_dir}/boot.img ${core_img} /dev/zero | dd bs=1024 count=1440 > ${floppy_img}
+  rm -f ${core_img}
+
+  if [ "x${image_type}" = xcdrom ] ; then
+    # build iso image
+    genisoimage -b grub_floppy.img \
+      -o ${output_image} -r -J ${floppy_dir}
+    rm -rf ${floppy_dir}
+  fi
 else
-    process_input_dir ${override_dir} ${native_platform}
-    coreboot_dir=
-    pc_dir=
-    case "${native_platform}" in
-        coreboot) coreboot_dir=${override_dir} ;;
-        pc) pc_dir=${override_dir} ;;
-    esac
+  # build core.img
+  core_img=`mktemp`
+  ${grub_mkimage} -d ${input_dir}/ -o ${core_img} biosdisk iso9660
+  
+  ### *** Our Change *** ###
+  additional_files="grub.cfg valix_boot.tga 8x13.pf2"
+  for file in ${additional_files}; do
+	cp build/${file} ${aux_dir}/boot/grub/
+  done;
+  cp output/kernel.elf ${aux_dir}/boot/
+
+  # build grub_eltorito image
+  cat ${input_dir}/cdboot.img ${core_img} > ${aux_dir}/boot/grub/grub_eltorito
+  rm -f ${core_img}
+
+  # build iso image
+  genisoimage -b boot/grub/grub_eltorito \
+    -no-emul-boot -boot-load-size 4 -boot-info-table \
+    -o ${output_image} -r -J ${aux_dir}
+  rm -rf ${aux_dir}
 fi
 
-# build coreboot core.img
-if test -e "${coreboot_dir}" ; then
-    echo "Enabling coreboot support ..."
-    memdisk_img=`mktemp "$MKTEMP_TEMPLATE"`
-    memdisk_dir=`mktemp -d "$MKTEMP_TEMPLATE"`
-    mkdir -p ${memdisk_dir}/boot/grub
-    # obtain date-based UUID
-    iso_uuid=$(date +%Y-%m-%d-%H-%M-%S-00)
-
-    modules="$(cat ${coreboot_dir}/partmap.lst) ${modules}"
-    cat << EOF > ${memdisk_dir}/boot/grub/grub.cfg
-search --fs-uuid --set ${iso_uuid}
-set prefix=(\${root})/boot/grub/${target_cpu}-coreboot
-EOF
-    (for i in ${modules} ; do
-        echo "insmod $i"
-    done ; \
-    echo "source /boot/grub/grub.cfg") \
-    > ${iso9660_dir}/boot/grub/i386-pc/grub.cfg
-
-    tar -C ${memdisk_dir} -cf ${memdisk_img} boot
-    rm -rf ${memdisk_dir}
-    grub-mkelfimage -d ${coreboot_dir}/ -m ${memdisk_img} -o ${iso9660_dir}/boot/multiboot.img \
-        memdisk tar search iso9660 configfile sh \
-        ata at_keyboard
-    rm -f ${memdisk_img}
-    grub_mkisofs_arguments="${grub_mkisofs_arguments} --modification-date=$(echo ${iso_uuid} | sed -e s/-//g)"
-fi
-
-# build BIOS core.img
-if test -e "${pc_dir}" ; then
-    echo "Enabling BIOS support ..."
-    core_img=`mktemp "$MKTEMP_TEMPLATE"`
-    grub-mkimage -d ${pc_dir}/ -o ${core_img} --prefix=/boot/grub/i386-pc \
-        iso9660 biosdisk
-    cat ${pc_dir}/cdboot.img ${core_img} > ${iso9660_dir}/boot/grub/i386-pc/eltorito.img
-
-    embed_img=`mktemp "$MKTEMP_TEMPLATE"`
-    cat ${pc_dir}/boot.img ${core_img} > ${embed_img}
-
-    rm -f ${core_img}
-
-    modules="$(cat ${pc_dir}/partmap.lst) ${modules}"
-    (for i in ${modules} ; do
-        echo "insmod $i"
-    done ; \
-    echo "source /boot/grub/grub.cfg") \
-    > ${iso9660_dir}/boot/grub/i386-pc/grub.cfg
-
-    grub_mkisofs_arguments="${grub_mkisofs_arguments} -b boot/grub/i386-pc/eltorito.img -boot-info-table \
-		--embedded-boot ${embed_img}"
-fi
-
-# build iso image
-grub-mkisofs ${grub_mkisofs_arguments} --protective-msdos-label -o ${output_image} -r ${iso9660_dir} ${source}
-rm -rf ${iso9660_dir}
-
-rm -f ${embed_img}
-
 exit 0
